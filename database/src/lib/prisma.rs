// Code generated by Prisma Client Rust. DO NOT EDIT

#![allow(warnings, unused)]
use prisma_client_rust::{
    bigdecimal::{self, FromPrimitive},
    chrono,
    datamodel::parse_configuration,
    operator::Operator,
    prisma_models::{InternalDataModelBuilder, PrismaValue},
    queries::{QueryContext, QueryInfo, Result as QueryResult},
    query_core::{
        executor, schema_builder, BuildMode, CoreError, InterpreterError, QueryExecutor,
        QueryGraphBuilderError, QuerySchema, QueryValue, Selection,
    },
    serde_json, transform_equals, BatchResult, Direction, ManyArgs, SerializedWhere,
    SerializedWhereValue, UniqueArgs,
};
pub use prisma_client_rust::{queries::Error as QueryError, NewClientError};
use serde::{Deserialize, Serialize};
use std::path::Path;
use std::sync::Arc;
static DATAMODEL_STR : & 'static str = "generator client {\n        provider = \"cargo run\"\n        output   = \"../src/lib/prisma.rs\"\n}\n\ndatasource db {\n        provider = \"postgresql\"\n        url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n        /// This matches the users discord ID\n        id String @id\n\n        /// When did this user start playing\n        startedPlaying DateTime @default(now())\n\n        /// the current ELO of the user based on glicko 2\n        elo Int @default(1000)\n\n        /// The games the user played as white\n        whiteGames Game[] @relation(name: \"whiteGames\")\n\n        /// The games the user played as black\n        blackGames Game[] @relation(name: \"blackGames\")\n}\n\nmodel Game {\n        id String @id @default(cuid())\n\n        /// Who played as white\n        white User @relation(fields: [whiteId], references: [id], name: \"whiteGames\")\n        /// Who played as black\n        black User @relation(fields: [blackId], references: [id], name: \"blackGames\")\n\n        /// Whites user ID\n        whiteId String\n        /// Blacks user ID\n        blackId String\n\n        /// Outcome for white\n        whiteOutcome Outcome\n        /// Outcome for black\n        blackOutcome Outcome\n\n        /// ELO for white when this game was played\n        whiteElo Int\n\n        /// ELO for black when this game was played\n        blackElo Int\n\n        /// Initial state of the board as FEN\n        initalBoard  String\n        /// The current state of the board as FEN\n        currentBoard String\n\n        /// List of moves in standard algebreic notation\n        moveList String[]\n}\n\nenum Outcome {\n        WIN\n        LOSS\n        DRAW\n        /// Game is still ongoing\n        UNDECIDED\n}\n" ;
static DATABASE_STR: &'static str = "postgresql";
pub async fn new_client() -> Result<_prisma::PrismaClient, NewClientError> {
    let config = parse_configuration(DATAMODEL_STR)?.subject;
    let source = config
        .datasources
        .first()
        .expect("Pleasy supply a datasource in your schema.prisma file");
    let url = if let Some(url) = source.load_shadow_database_url()? {
        url
    } else {
        source.load_url(|key| std::env::var(key).ok())?
    };
    let url = if url.starts_with("file:") {
        let path = url.split(":").nth(1).unwrap();
        if Path::new("./schema.prisma").exists() {
            url
        } else if Path::new("./prisma/schema.prisma").exists() {
            format!("file:./prisma/{}", path)
        } else {
            url
        }
    } else {
        url
    };
    new_client_with_url(&url).await
}
pub async fn new_client_with_url(url: &str) -> Result<_prisma::PrismaClient, NewClientError> {
    let config = parse_configuration(DATAMODEL_STR)?.subject;
    let source = config
        .datasources
        .first()
        .expect("Pleasy supply a datasource in your schema.prisma file");
    let (db_name, executor) = executor::load(&source, &[], &url).await?;
    let internal_model = InternalDataModelBuilder::new(DATAMODEL_STR).build(db_name);
    let query_schema = Arc::new(schema_builder::build(
        internal_model,
        BuildMode::Modern,
        true,
        source.capabilities(),
        vec![],
        source.referential_integrity(),
    ));
    executor.primary_connector().get_connection().await?;
    Ok(PrismaClient::_new(executor, query_schema))
}
pub mod user {
    use super::_prisma::*;
    use super::*;
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn cursor(cursor: String) -> Cursor {
            Cursor::Id(cursor)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::IdInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::IdNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::IdLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::IdLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::IdGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::IdGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::IdContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::IdStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::IdEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::IdMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::IdNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetId(value.0)
            }
        }
    }
    pub mod started_playing {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: chrono::DateTime<chrono::FixedOffset>) -> T {
            Set(value).into()
        }
        pub fn equals(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::StartedPlayingEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::StartedPlaying(direction)
        }
        pub fn in_vec(value: Vec<chrono::DateTime<chrono::FixedOffset>>) -> WhereParam {
            WhereParam::StartedPlayingInVec(value)
        }
        pub fn not_in_vec(value: Vec<chrono::DateTime<chrono::FixedOffset>>) -> WhereParam {
            WhereParam::StartedPlayingNotInVec(value)
        }
        pub fn lt(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::StartedPlayingLt(value)
        }
        pub fn lte(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::StartedPlayingLte(value)
        }
        pub fn gt(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::StartedPlayingGt(value)
        }
        pub fn gte(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::StartedPlayingGte(value)
        }
        pub fn not(value: chrono::DateTime<chrono::FixedOffset>) -> WhereParam {
            WhereParam::StartedPlayingNot(value)
        }
        pub struct Set(chrono::DateTime<chrono::FixedOffset>);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetStartedPlaying(value.0)
            }
        }
    }
    pub mod elo {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::EloEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Elo(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::EloInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::EloNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::EloLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::EloLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::EloGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::EloGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::EloNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementElo(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementElo(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyElo(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideElo(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetElo(value.0)
            }
        }
    }
    pub mod white_games {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn some(value: Vec<game::WhereParam>) -> WhereParam {
            WhereParam::WhiteGamesSome(value)
        }
        pub fn every(value: Vec<game::WhereParam>) -> WhereParam {
            WhereParam::WhiteGamesEvery(value)
        }
        pub fn none(value: Vec<game::WhereParam>) -> WhereParam {
            WhereParam::WhiteGamesNone(value)
        }
        pub struct Fetch {
            args: game::ManyArgs,
        }
        impl Fetch {
            pub fn with(mut self, params: impl Into<game::WithParam>) -> Self {
                self.args = self.args.with(params.into());
                self
            }
            pub fn order_by(mut self, param: game::OrderByParam) -> Self {
                self.args = self.args.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.args = self.args.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.args = self.args.take(value);
                self
            }
            pub fn cursor(mut self, value: impl Into<game::Cursor>) -> Self {
                self.args = self.args.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(fetch: Fetch) -> Self {
                WithParam::WhiteGames(fetch.args)
            }
        }
        pub fn fetch(params: Vec<game::WhereParam>) -> Fetch {
            Fetch {
                args: game::ManyArgs::new(params),
            }
        }
        pub fn link<T: From<Link>>(params: Vec<game::UniqueWhereParam>) -> T {
            Link(params).into()
        }
        pub fn unlink(params: Vec<game::UniqueWhereParam>) -> SetParam {
            SetParam::UnlinkWhiteGames(params)
        }
        pub struct Link(Vec<game::UniqueWhereParam>);
        impl From<Link> for SetParam {
            fn from(value: Link) -> Self {
                Self::LinkWhiteGames(value.0)
            }
        }
    }
    pub mod black_games {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn some(value: Vec<game::WhereParam>) -> WhereParam {
            WhereParam::BlackGamesSome(value)
        }
        pub fn every(value: Vec<game::WhereParam>) -> WhereParam {
            WhereParam::BlackGamesEvery(value)
        }
        pub fn none(value: Vec<game::WhereParam>) -> WhereParam {
            WhereParam::BlackGamesNone(value)
        }
        pub struct Fetch {
            args: game::ManyArgs,
        }
        impl Fetch {
            pub fn with(mut self, params: impl Into<game::WithParam>) -> Self {
                self.args = self.args.with(params.into());
                self
            }
            pub fn order_by(mut self, param: game::OrderByParam) -> Self {
                self.args = self.args.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.args = self.args.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.args = self.args.take(value);
                self
            }
            pub fn cursor(mut self, value: impl Into<game::Cursor>) -> Self {
                self.args = self.args.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(fetch: Fetch) -> Self {
                WithParam::BlackGames(fetch.args)
            }
        }
        pub fn fetch(params: Vec<game::WhereParam>) -> Fetch {
            Fetch {
                args: game::ManyArgs::new(params),
            }
        }
        pub fn link<T: From<Link>>(params: Vec<game::UniqueWhereParam>) -> T {
            Link(params).into()
        }
        pub fn unlink(params: Vec<game::UniqueWhereParam>) -> SetParam {
            SetParam::UnlinkBlackGames(params)
        }
        pub struct Link(Vec<game::UniqueWhereParam>);
        impl From<Link> for SetParam {
            fn from(value: Link) -> Self {
                Self::LinkBlackGames(value.0)
            }
        }
    }
    pub fn _outputs() -> Vec<Selection> {
        ["id", "startedPlaying", "elo"]
            .into_iter()
            .map(|o| {
                let builder = Selection::builder(o);
                builder.build()
            })
            .collect()
    }
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: String,
        #[serde(rename = "startedPlaying")]
        pub started_playing: chrono::DateTime<chrono::FixedOffset>,
        #[serde(rename = "elo")]
        pub elo: i32,
        #[serde(rename = "whiteGames")]
        pub white_games: Option<Vec<super::game::Data>>,
        #[serde(rename = "blackGames")]
        pub black_games: Option<Vec<super::game::Data>>,
    }
    impl Data {
        pub fn white_games(&self) -> Result<&Vec<super::game::Data>, &'static str> {
            self.white_games.as_ref().ok_or(
                "Attempted to access 'white_games' but did not fetch it using the .with() syntax",
            )
        }
        pub fn black_games(&self) -> Result<&Vec<super::game::Data>, &'static str> {
            self.black_games.as_ref().ok_or(
                "Attempted to access 'black_games' but did not fetch it using the .with() syntax",
            )
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        WhiteGames(super::game::ManyArgs),
        BlackGames(super::game::ManyArgs),
    }
    impl Into<Selection> for WithParam {
        fn into(self) -> Selection {
            match self {
                Self::WhiteGames(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections.extend(super::game::_outputs());
                    let mut builder = Selection::builder("whiteGames");
                    builder
                        .nested_selections(nested_selections)
                        .set_arguments(arguments);
                    builder.build()
                }
                Self::BlackGames(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections.extend(super::game::_outputs());
                    let mut builder = Selection::builder("blackGames");
                    builder
                        .nested_selections(nested_selections)
                        .set_arguments(arguments);
                    builder.build()
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(String),
        SetStartedPlaying(chrono::DateTime<chrono::FixedOffset>),
        SetElo(i32),
        IncrementElo(i32),
        DecrementElo(i32),
        MultiplyElo(i32),
        DivideElo(i32),
        LinkWhiteGames(Vec<super::game::UniqueWhereParam>),
        UnlinkWhiteGames(Vec<super::game::UniqueWhereParam>),
        LinkBlackGames(Vec<super::game::UniqueWhereParam>),
        UnlinkBlackGames(Vec<super::game::UniqueWhereParam>),
    }
    impl Into<(String, PrismaValue)> for SetParam {
        fn into(self) -> (String, PrismaValue) {
            match self {
                SetParam::SetId(value) => ("id".to_string(), PrismaValue::String(value)),
                SetParam::SetStartedPlaying(value) => {
                    ("startedPlaying".to_string(), PrismaValue::DateTime(value))
                }
                SetParam::SetElo(value) => ("elo".to_string(), PrismaValue::Int(value as i64)),
                SetParam::IncrementElo(value) => (
                    "elo".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementElo(value) => (
                    "elo".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyElo(value) => (
                    "elo".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideElo(value) => (
                    "elo".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::LinkWhiteGames(where_params) => (
                    "whiteGames".to_string(),
                    PrismaValue::Object(vec![(
                        "connect".to_string(),
                        PrismaValue::Object(transform_equals(
                            where_params
                                .into_iter()
                                .map(Into::<super::game::WhereParam>::into),
                        )),
                    )]),
                ),
                SetParam::UnlinkWhiteGames(where_params) => (
                    "whiteGames".to_string(),
                    PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        PrismaValue::Object(
                            transform_equals(
                                where_params
                                    .into_iter()
                                    .map(Into::<super::game::WhereParam>::into),
                            )
                            .into_iter()
                            .collect(),
                        ),
                    )]),
                ),
                SetParam::LinkBlackGames(where_params) => (
                    "blackGames".to_string(),
                    PrismaValue::Object(vec![(
                        "connect".to_string(),
                        PrismaValue::Object(transform_equals(
                            where_params
                                .into_iter()
                                .map(Into::<super::game::WhereParam>::into),
                        )),
                    )]),
                ),
                SetParam::UnlinkBlackGames(where_params) => (
                    "blackGames".to_string(),
                    PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        PrismaValue::Object(
                            transform_equals(
                                where_params
                                    .into_iter()
                                    .map(Into::<super::game::WhereParam>::into),
                            )
                            .into_iter()
                            .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(Direction),
        StartedPlaying(Direction),
        Elo(Direction),
    }
    impl Into<(String, PrismaValue)> for OrderByParam {
        fn into(self) -> (String, PrismaValue) {
            match self {
                Self::Id(direction) => {
                    ("id".to_string(), PrismaValue::String(direction.to_string()))
                }
                Self::StartedPlaying(direction) => (
                    "startedPlaying".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::Elo(direction) => (
                    "elo".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum Cursor {
        Id(String),
    }
    impl Into<(String, PrismaValue)> for Cursor {
        fn into(self) -> (String, PrismaValue) {
            match self {
                Self::Id(cursor) => ("id".to_string(), PrismaValue::String(cursor)),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        IdEquals(String),
        IdInVec(Vec<String>),
        IdNotInVec(Vec<String>),
        IdLt(String),
        IdLte(String),
        IdGt(String),
        IdGte(String),
        IdContains(String),
        IdStartsWith(String),
        IdEndsWith(String),
        IdMode(QueryMode),
        IdNot(String),
        StartedPlayingEquals(chrono::DateTime<chrono::FixedOffset>),
        StartedPlayingInVec(Vec<chrono::DateTime<chrono::FixedOffset>>),
        StartedPlayingNotInVec(Vec<chrono::DateTime<chrono::FixedOffset>>),
        StartedPlayingLt(chrono::DateTime<chrono::FixedOffset>),
        StartedPlayingLte(chrono::DateTime<chrono::FixedOffset>),
        StartedPlayingGt(chrono::DateTime<chrono::FixedOffset>),
        StartedPlayingGte(chrono::DateTime<chrono::FixedOffset>),
        StartedPlayingNot(chrono::DateTime<chrono::FixedOffset>),
        EloEquals(i32),
        EloInVec(Vec<i32>),
        EloNotInVec(Vec<i32>),
        EloLt(i32),
        EloLte(i32),
        EloGt(i32),
        EloGte(i32),
        EloNot(i32),
        WhiteGamesSome(Vec<super::game::WhereParam>),
        WhiteGamesEvery(Vec<super::game::WhereParam>),
        WhiteGamesNone(Vec<super::game::WhereParam>),
        BlackGamesSome(Vec<super::game::WhereParam>),
        BlackGamesEvery(Vec<super::game::WhereParam>),
        BlackGamesNone(Vec<super::game::WhereParam>),
    }
    impl Into<SerializedWhere> for WhereParam {
        fn into(self) -> SerializedWhere {
            match self {
                Self::Not(value) => (
                    "NOT".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::Or(value) => (
                    "OR".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::IdEquals(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdInVec(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::IdNotInVec(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::IdLt(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdLte(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdGt(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdGte(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdContains(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdStartsWith(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdEndsWith(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdMode(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::IdNot(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::StartedPlayingEquals(value) => (
                    "startedPlaying".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::StartedPlayingInVec(value) => (
                    "startedPlaying".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::DateTime(v))
                                .collect(),
                        ),
                    )]),
                ),
                Self::StartedPlayingNotInVec(value) => (
                    "startedPlaying".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::DateTime(v))
                                .collect(),
                        ),
                    )]),
                ),
                Self::StartedPlayingLt(value) => (
                    "startedPlaying".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::StartedPlayingLte(value) => (
                    "startedPlaying".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::StartedPlayingGt(value) => (
                    "startedPlaying".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::StartedPlayingGte(value) => (
                    "startedPlaying".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::StartedPlayingNot(value) => (
                    "startedPlaying".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::DateTime(value),
                    )]),
                ),
                Self::EloEquals(value) => (
                    "elo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::EloInVec(value) => (
                    "elo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::EloNotInVec(value) => (
                    "elo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::EloLt(value) => (
                    "elo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::EloLte(value) => (
                    "elo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::EloGt(value) => (
                    "elo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::EloGte(value) => (
                    "elo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::EloNot(value) => (
                    "elo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::WhiteGamesSome(value) => (
                    "whiteGames".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::WhiteGamesEvery(value) => (
                    "whiteGames".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::WhiteGamesNone(value) => (
                    "whiteGames".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::BlackGamesSome(value) => (
                    "blackGames".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::BlackGamesEvery(value) => (
                    "blackGames".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::BlackGamesNone(value) => (
                    "blackGames".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => Self::IdEquals(value),
            }
        }
    }
    impl From<Operator<Self>> for WhereParam {
        fn from(op: Operator<Self>) -> Self {
            match op {
                Operator::Not(value) => Self::Not(value),
                Operator::And(value) => Self::And(value),
                Operator::Or(value) => Self::Or(value),
            }
        }
    }
    pub type UniqueArgs = prisma_client_rust::UniqueArgs<WithParam>;
    pub type ManyArgs = prisma_client_rust::ManyArgs<WhereParam, WithParam, OrderByParam, Cursor>;
    pub type Create<'a> = prisma_client_rust::Create<'a, SetParam, WithParam, Data>;
    pub type FindUnique<'a> =
        prisma_client_rust::FindUnique<'a, WhereParam, WithParam, SetParam, Data>;
    pub type FindMany<'a> = prisma_client_rust::FindMany<
        'a,
        WhereParam,
        WithParam,
        OrderByParam,
        Cursor,
        SetParam,
        Data,
    >;
    pub type FindFirst<'a> =
        prisma_client_rust::FindFirst<'a, WhereParam, WithParam, OrderByParam, Cursor, Data>;
    pub type Update<'a> = prisma_client_rust::Update<'a, WhereParam, SetParam, WithParam, Data>;
    pub type UpdateMany<'a> = prisma_client_rust::UpdateMany<'a, WhereParam, SetParam>;
    pub type Upsert<'a> = prisma_client_rust::Upsert<'a, WhereParam, SetParam, WithParam, Data>;
    pub type Delete<'a> = prisma_client_rust::Delete<'a, WhereParam, WithParam, Data>;
    pub type DeleteMany<'a> = prisma_client_rust::DeleteMany<'a, WhereParam>;
    pub struct Actions<'a> {
        pub client: &'a PrismaClient,
    }
    impl<'a> Actions<'a> {
        pub fn create(self, id: id::Set, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.push(id.into());
            Create::new(
                self.client._new_query_context(),
                QueryInfo::new("User", _outputs()),
                _params,
            )
        }
        pub fn find_unique(self, param: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(
                self.client._new_query_context(),
                QueryInfo::new("User", _outputs()),
                param.into(),
            )
        }
        pub fn find_first(self, params: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(
                self.client._new_query_context(),
                QueryInfo::new("User", _outputs()),
                params,
            )
        }
        pub fn find_many(self, params: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(
                self.client._new_query_context(),
                QueryInfo::new("User", _outputs()),
                params,
            )
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            _create: (id::Set, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            let (id, mut _params) = _create;
            _params.push(id.into());
            Upsert::new(
                self.client._new_query_context(),
                QueryInfo::new("User", _outputs()),
                _where.into(),
                _params,
                _update,
            )
        }
    }
}
pub mod game {
    use super::_prisma::*;
    use super::*;
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn cursor(cursor: String) -> Cursor {
            Cursor::Id(cursor)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::IdInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::IdNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::IdLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::IdLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::IdGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::IdGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::IdContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::IdStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::IdEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::IdMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::IdNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetId(value.0)
            }
        }
    }
    pub mod white {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn is(value: Vec<user::WhereParam>) -> WhereParam {
            WhereParam::WhiteIs(value)
        }
        pub fn is_not(value: Vec<user::WhereParam>) -> WhereParam {
            WhereParam::WhiteIsNot(value)
        }
        pub struct Fetch {
            args: user::UniqueArgs,
        }
        impl Fetch {
            pub fn with(mut self, params: impl Into<user::WithParam>) -> Self {
                self.args = self.args.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(fetch: Fetch) -> Self {
                WithParam::White(fetch.args)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch {
                args: user::UniqueArgs::new(),
            }
        }
        pub fn link<T: From<Link>>(value: user::UniqueWhereParam) -> T {
            Link(value).into()
        }
        pub struct Link(user::UniqueWhereParam);
        impl From<Link> for SetParam {
            fn from(value: Link) -> Self {
                Self::LinkWhite(value.0)
            }
        }
    }
    pub mod black {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn is(value: Vec<user::WhereParam>) -> WhereParam {
            WhereParam::BlackIs(value)
        }
        pub fn is_not(value: Vec<user::WhereParam>) -> WhereParam {
            WhereParam::BlackIsNot(value)
        }
        pub struct Fetch {
            args: user::UniqueArgs,
        }
        impl Fetch {
            pub fn with(mut self, params: impl Into<user::WithParam>) -> Self {
                self.args = self.args.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(fetch: Fetch) -> Self {
                WithParam::Black(fetch.args)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch {
                args: user::UniqueArgs::new(),
            }
        }
        pub fn link<T: From<Link>>(value: user::UniqueWhereParam) -> T {
            Link(value).into()
        }
        pub struct Link(user::UniqueWhereParam);
        impl From<Link> for SetParam {
            fn from(value: Link) -> Self {
                Self::LinkBlack(value.0)
            }
        }
    }
    pub mod white_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::WhiteIdEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::WhiteId(direction)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::WhiteIdInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::WhiteIdNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::WhiteIdLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::WhiteIdLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::WhiteIdGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::WhiteIdGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::WhiteIdContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::WhiteIdStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::WhiteIdEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::WhiteIdMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::WhiteIdNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetWhiteId(value.0)
            }
        }
    }
    pub mod black_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::BlackIdEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::BlackId(direction)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::BlackIdInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::BlackIdNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::BlackIdLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::BlackIdLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::BlackIdGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::BlackIdGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::BlackIdContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::BlackIdStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::BlackIdEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::BlackIdMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::BlackIdNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetBlackId(value.0)
            }
        }
    }
    pub mod white_outcome {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: Outcome) -> T {
            Set(value).into()
        }
        pub fn equals(value: Outcome) -> WhereParam {
            WhereParam::WhiteOutcomeEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::WhiteOutcome(direction)
        }
        pub struct Set(Outcome);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetWhiteOutcome(value.0)
            }
        }
    }
    pub mod black_outcome {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: Outcome) -> T {
            Set(value).into()
        }
        pub fn equals(value: Outcome) -> WhereParam {
            WhereParam::BlackOutcomeEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::BlackOutcome(direction)
        }
        pub struct Set(Outcome);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetBlackOutcome(value.0)
            }
        }
    }
    pub mod white_elo {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::WhiteEloEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::WhiteElo(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::WhiteEloInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::WhiteEloNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::WhiteEloLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::WhiteEloLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::WhiteEloGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::WhiteEloGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::WhiteEloNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementWhiteElo(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementWhiteElo(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyWhiteElo(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideWhiteElo(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetWhiteElo(value.0)
            }
        }
    }
    pub mod black_elo {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::BlackEloEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::BlackElo(direction)
        }
        pub fn in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::BlackEloInVec(value)
        }
        pub fn not_in_vec(value: Vec<i32>) -> WhereParam {
            WhereParam::BlackEloNotInVec(value)
        }
        pub fn lt(value: i32) -> WhereParam {
            WhereParam::BlackEloLt(value)
        }
        pub fn lte(value: i32) -> WhereParam {
            WhereParam::BlackEloLte(value)
        }
        pub fn gt(value: i32) -> WhereParam {
            WhereParam::BlackEloGt(value)
        }
        pub fn gte(value: i32) -> WhereParam {
            WhereParam::BlackEloGte(value)
        }
        pub fn not(value: i32) -> WhereParam {
            WhereParam::BlackEloNot(value)
        }
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementBlackElo(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementBlackElo(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyBlackElo(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideBlackElo(value)
        }
        pub struct Set(i32);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetBlackElo(value.0)
            }
        }
    }
    pub mod inital_board {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::InitalBoardEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::InitalBoard(direction)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::InitalBoardInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::InitalBoardNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::InitalBoardLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::InitalBoardLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::InitalBoardGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::InitalBoardGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::InitalBoardContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::InitalBoardStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::InitalBoardEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::InitalBoardMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::InitalBoardNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetInitalBoard(value.0)
            }
        }
    }
    pub mod current_board {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::CurrentBoardEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::CurrentBoard(direction)
        }
        pub fn in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::CurrentBoardInVec(value)
        }
        pub fn not_in_vec(value: Vec<String>) -> WhereParam {
            WhereParam::CurrentBoardNotInVec(value)
        }
        pub fn lt(value: String) -> WhereParam {
            WhereParam::CurrentBoardLt(value)
        }
        pub fn lte(value: String) -> WhereParam {
            WhereParam::CurrentBoardLte(value)
        }
        pub fn gt(value: String) -> WhereParam {
            WhereParam::CurrentBoardGt(value)
        }
        pub fn gte(value: String) -> WhereParam {
            WhereParam::CurrentBoardGte(value)
        }
        pub fn contains(value: String) -> WhereParam {
            WhereParam::CurrentBoardContains(value)
        }
        pub fn starts_with(value: String) -> WhereParam {
            WhereParam::CurrentBoardStartsWith(value)
        }
        pub fn ends_with(value: String) -> WhereParam {
            WhereParam::CurrentBoardEndsWith(value)
        }
        pub fn mode(value: QueryMode) -> WhereParam {
            WhereParam::CurrentBoardMode(value)
        }
        pub fn not(value: String) -> WhereParam {
            WhereParam::CurrentBoardNot(value)
        }
        pub struct Set(String);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetCurrentBoard(value.0)
            }
        }
    }
    pub mod move_list {
        use super::super::*;
        use super::_prisma::*;
        use super::{Cursor, OrderByParam, SetParam, UniqueWhereParam, WhereParam, WithParam};
        pub fn set<T: From<Set>>(value: Vec<String>) -> T {
            Set(value).into()
        }
        pub fn equals(value: Vec<String>) -> WhereParam {
            WhereParam::MoveListEquals(value).into()
        }
        pub fn order(direction: Direction) -> OrderByParam {
            OrderByParam::MoveList(direction)
        }
        pub fn has(value: String) -> WhereParam {
            WhereParam::MoveListHas(value)
        }
        pub fn has_every(value: Vec<String>) -> WhereParam {
            WhereParam::MoveListHasEvery(value)
        }
        pub fn has_some(value: Vec<String>) -> WhereParam {
            WhereParam::MoveListHasSome(value)
        }
        pub fn is_empty(value: bool) -> WhereParam {
            WhereParam::MoveListIsEmpty(value)
        }
        pub fn push(value: Vec<String>) -> SetParam {
            SetParam::PushMoveList(value)
        }
        pub struct Set(Vec<String>);
        impl From<Set> for SetParam {
            fn from(value: Set) -> Self {
                Self::SetMoveList(value.0)
            }
        }
    }
    pub fn _outputs() -> Vec<Selection> {
        [
            "id",
            "whiteId",
            "blackId",
            "whiteOutcome",
            "blackOutcome",
            "whiteElo",
            "blackElo",
            "initalBoard",
            "currentBoard",
            "moveList",
        ]
        .into_iter()
        .map(|o| {
            let builder = Selection::builder(o);
            builder.build()
        })
        .collect()
    }
    #[derive(Debug, Clone, Serialize, Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: String,
        #[serde(rename = "white")]
        pub white: Option<Box<super::user::Data>>,
        #[serde(rename = "black")]
        pub black: Option<Box<super::user::Data>>,
        #[serde(rename = "whiteId")]
        pub white_id: String,
        #[serde(rename = "blackId")]
        pub black_id: String,
        #[serde(rename = "whiteOutcome")]
        pub white_outcome: Outcome,
        #[serde(rename = "blackOutcome")]
        pub black_outcome: Outcome,
        #[serde(rename = "whiteElo")]
        pub white_elo: i32,
        #[serde(rename = "blackElo")]
        pub black_elo: i32,
        #[serde(rename = "initalBoard")]
        pub inital_board: String,
        #[serde(rename = "currentBoard")]
        pub current_board: String,
        #[serde(rename = "moveList")]
        pub move_list: Vec<String>,
    }
    impl Data {
        pub fn white(&self) -> Result<&super::user::Data, &'static str> {
            self.white
                .as_ref()
                .ok_or("Attempted to access 'white' but did not fetch it using the .with() syntax")
                .map(|v| v.as_ref())
        }
        pub fn black(&self) -> Result<&super::user::Data, &'static str> {
            self.black
                .as_ref()
                .ok_or("Attempted to access 'black' but did not fetch it using the .with() syntax")
                .map(|v| v.as_ref())
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        White(super::user::UniqueArgs),
        Black(super::user::UniqueArgs),
    }
    impl Into<Selection> for WithParam {
        fn into(self) -> Selection {
            match self {
                Self::White(args) => {
                    let mut selections = super::user::_outputs();
                    selections.extend(args.with_params.into_iter().map(Into::<Selection>::into));
                    let mut builder = Selection::builder("white");
                    builder.nested_selections(selections);
                    builder.build()
                }
                Self::Black(args) => {
                    let mut selections = super::user::_outputs();
                    selections.extend(args.with_params.into_iter().map(Into::<Selection>::into));
                    let mut builder = Selection::builder("black");
                    builder.nested_selections(selections);
                    builder.build()
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(String),
        LinkWhite(super::user::UniqueWhereParam),
        LinkBlack(super::user::UniqueWhereParam),
        SetWhiteId(String),
        SetBlackId(String),
        SetWhiteOutcome(Outcome),
        SetBlackOutcome(Outcome),
        SetWhiteElo(i32),
        IncrementWhiteElo(i32),
        DecrementWhiteElo(i32),
        MultiplyWhiteElo(i32),
        DivideWhiteElo(i32),
        SetBlackElo(i32),
        IncrementBlackElo(i32),
        DecrementBlackElo(i32),
        MultiplyBlackElo(i32),
        DivideBlackElo(i32),
        SetInitalBoard(String),
        SetCurrentBoard(String),
        SetMoveList(Vec<String>),
        PushMoveList(Vec<String>),
    }
    impl Into<(String, PrismaValue)> for SetParam {
        fn into(self) -> (String, PrismaValue) {
            match self {
                SetParam::SetId(value) => ("id".to_string(), PrismaValue::String(value)),
                SetParam::LinkWhite(where_param) => (
                    "white".to_string(),
                    PrismaValue::Object(vec![(
                        "connect".to_string(),
                        PrismaValue::Object(transform_equals(
                            vec![Into::<super::user::WhereParam>::into(where_param)].into_iter(),
                        )),
                    )]),
                ),
                SetParam::LinkBlack(where_param) => (
                    "black".to_string(),
                    PrismaValue::Object(vec![(
                        "connect".to_string(),
                        PrismaValue::Object(transform_equals(
                            vec![Into::<super::user::WhereParam>::into(where_param)].into_iter(),
                        )),
                    )]),
                ),
                SetParam::SetWhiteId(value) => ("whiteId".to_string(), PrismaValue::String(value)),
                SetParam::SetBlackId(value) => ("blackId".to_string(), PrismaValue::String(value)),
                SetParam::SetWhiteOutcome(value) => (
                    "whiteOutcome".to_string(),
                    PrismaValue::Enum(value.to_string()),
                ),
                SetParam::SetBlackOutcome(value) => (
                    "blackOutcome".to_string(),
                    PrismaValue::Enum(value.to_string()),
                ),
                SetParam::SetWhiteElo(value) => {
                    ("whiteElo".to_string(), PrismaValue::Int(value as i64))
                }
                SetParam::IncrementWhiteElo(value) => (
                    "whiteElo".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementWhiteElo(value) => (
                    "whiteElo".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyWhiteElo(value) => (
                    "whiteElo".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideWhiteElo(value) => (
                    "whiteElo".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetBlackElo(value) => {
                    ("blackElo".to_string(), PrismaValue::Int(value as i64))
                }
                SetParam::IncrementBlackElo(value) => (
                    "blackElo".to_string(),
                    PrismaValue::Object(vec![(
                        "increment".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementBlackElo(value) => (
                    "blackElo".to_string(),
                    PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyBlackElo(value) => (
                    "blackElo".to_string(),
                    PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideBlackElo(value) => (
                    "blackElo".to_string(),
                    PrismaValue::Object(vec![(
                        "divide".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetInitalBoard(value) => {
                    ("initalBoard".to_string(), PrismaValue::String(value))
                }
                SetParam::SetCurrentBoard(value) => {
                    ("currentBoard".to_string(), PrismaValue::String(value))
                }
                SetParam::SetMoveList(value) => (
                    "moveList".to_string(),
                    PrismaValue::List(value.into_iter().map(|v| PrismaValue::String(v)).collect()),
                ),
                SetParam::PushMoveList(value) => (
                    "moveList".to_string(),
                    PrismaValue::Object(vec![(
                        "push".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(Direction),
        WhiteId(Direction),
        BlackId(Direction),
        WhiteOutcome(Direction),
        BlackOutcome(Direction),
        WhiteElo(Direction),
        BlackElo(Direction),
        InitalBoard(Direction),
        CurrentBoard(Direction),
        MoveList(Direction),
    }
    impl Into<(String, PrismaValue)> for OrderByParam {
        fn into(self) -> (String, PrismaValue) {
            match self {
                Self::Id(direction) => {
                    ("id".to_string(), PrismaValue::String(direction.to_string()))
                }
                Self::WhiteId(direction) => (
                    "whiteId".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::BlackId(direction) => (
                    "blackId".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::WhiteOutcome(direction) => (
                    "whiteOutcome".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::BlackOutcome(direction) => (
                    "blackOutcome".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::WhiteElo(direction) => (
                    "whiteElo".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::BlackElo(direction) => (
                    "blackElo".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::InitalBoard(direction) => (
                    "initalBoard".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::CurrentBoard(direction) => (
                    "currentBoard".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
                Self::MoveList(direction) => (
                    "moveList".to_string(),
                    PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum Cursor {
        Id(String),
    }
    impl Into<(String, PrismaValue)> for Cursor {
        fn into(self) -> (String, PrismaValue) {
            match self {
                Self::Id(cursor) => ("id".to_string(), PrismaValue::String(cursor)),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        IdEquals(String),
        IdInVec(Vec<String>),
        IdNotInVec(Vec<String>),
        IdLt(String),
        IdLte(String),
        IdGt(String),
        IdGte(String),
        IdContains(String),
        IdStartsWith(String),
        IdEndsWith(String),
        IdMode(QueryMode),
        IdNot(String),
        WhiteIs(Vec<super::user::WhereParam>),
        WhiteIsNot(Vec<super::user::WhereParam>),
        BlackIs(Vec<super::user::WhereParam>),
        BlackIsNot(Vec<super::user::WhereParam>),
        WhiteIdEquals(String),
        WhiteIdInVec(Vec<String>),
        WhiteIdNotInVec(Vec<String>),
        WhiteIdLt(String),
        WhiteIdLte(String),
        WhiteIdGt(String),
        WhiteIdGte(String),
        WhiteIdContains(String),
        WhiteIdStartsWith(String),
        WhiteIdEndsWith(String),
        WhiteIdMode(QueryMode),
        WhiteIdNot(String),
        BlackIdEquals(String),
        BlackIdInVec(Vec<String>),
        BlackIdNotInVec(Vec<String>),
        BlackIdLt(String),
        BlackIdLte(String),
        BlackIdGt(String),
        BlackIdGte(String),
        BlackIdContains(String),
        BlackIdStartsWith(String),
        BlackIdEndsWith(String),
        BlackIdMode(QueryMode),
        BlackIdNot(String),
        WhiteOutcomeEquals(Outcome),
        BlackOutcomeEquals(Outcome),
        WhiteEloEquals(i32),
        WhiteEloInVec(Vec<i32>),
        WhiteEloNotInVec(Vec<i32>),
        WhiteEloLt(i32),
        WhiteEloLte(i32),
        WhiteEloGt(i32),
        WhiteEloGte(i32),
        WhiteEloNot(i32),
        BlackEloEquals(i32),
        BlackEloInVec(Vec<i32>),
        BlackEloNotInVec(Vec<i32>),
        BlackEloLt(i32),
        BlackEloLte(i32),
        BlackEloGt(i32),
        BlackEloGte(i32),
        BlackEloNot(i32),
        InitalBoardEquals(String),
        InitalBoardInVec(Vec<String>),
        InitalBoardNotInVec(Vec<String>),
        InitalBoardLt(String),
        InitalBoardLte(String),
        InitalBoardGt(String),
        InitalBoardGte(String),
        InitalBoardContains(String),
        InitalBoardStartsWith(String),
        InitalBoardEndsWith(String),
        InitalBoardMode(QueryMode),
        InitalBoardNot(String),
        CurrentBoardEquals(String),
        CurrentBoardInVec(Vec<String>),
        CurrentBoardNotInVec(Vec<String>),
        CurrentBoardLt(String),
        CurrentBoardLte(String),
        CurrentBoardGt(String),
        CurrentBoardGte(String),
        CurrentBoardContains(String),
        CurrentBoardStartsWith(String),
        CurrentBoardEndsWith(String),
        CurrentBoardMode(QueryMode),
        CurrentBoardNot(String),
        MoveListEquals(Vec<String>),
        MoveListHas(String),
        MoveListHasEvery(Vec<String>),
        MoveListHasSome(Vec<String>),
        MoveListIsEmpty(bool),
    }
    impl Into<SerializedWhere> for WhereParam {
        fn into(self) -> SerializedWhere {
            match self {
                Self::Not(value) => (
                    "NOT".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::Or(value) => (
                    "OR".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND".to_string(),
                    SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(|v| PrismaValue::Object(transform_equals(vec![v].into_iter())))
                            .collect(),
                    ),
                ),
                Self::IdEquals(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdInVec(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::IdNotInVec(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::IdLt(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdLte(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdGt(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdGte(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdContains(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdStartsWith(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdEndsWith(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::IdMode(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::IdNot(value) => (
                    "id".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIs(value) => (
                    "white".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::WhiteIsNot(value) => (
                    "white".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::BlackIs(value) => (
                    "black".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::BlackIsNot(value) => (
                    "black".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        PrismaValue::Object(transform_equals(
                            value.into_iter().map(Into::<SerializedWhere>::into),
                        )),
                    )]),
                ),
                Self::WhiteIdEquals(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIdInVec(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::WhiteIdNotInVec(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::WhiteIdLt(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIdLte(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIdGt(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIdGte(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIdContains(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIdStartsWith(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIdEndsWith(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteIdMode(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::WhiteIdNot(value) => (
                    "whiteId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdEquals(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdInVec(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::BlackIdNotInVec(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::BlackIdLt(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdLte(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdGt(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdGte(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdContains(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdStartsWith(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdEndsWith(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::BlackIdMode(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::BlackIdNot(value) => (
                    "blackId".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::WhiteOutcomeEquals(value) => (
                    "whiteOutcome".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::BlackOutcomeEquals(value) => (
                    "blackOutcome".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::WhiteEloEquals(value) => (
                    "whiteElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::WhiteEloInVec(value) => (
                    "whiteElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::WhiteEloNotInVec(value) => (
                    "whiteElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::WhiteEloLt(value) => (
                    "whiteElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::WhiteEloLte(value) => (
                    "whiteElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::WhiteEloGt(value) => (
                    "whiteElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::WhiteEloGte(value) => (
                    "whiteElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::WhiteEloNot(value) => (
                    "whiteElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::BlackEloEquals(value) => (
                    "blackElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::BlackEloInVec(value) => (
                    "blackElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::BlackEloNotInVec(value) => (
                    "blackElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value
                                .into_iter()
                                .map(|v| PrismaValue::Int(v as i64))
                                .collect(),
                        ),
                    )]),
                ),
                Self::BlackEloLt(value) => (
                    "blackElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::BlackEloLte(value) => (
                    "blackElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::BlackEloGt(value) => (
                    "blackElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::BlackEloGte(value) => (
                    "blackElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::BlackEloNot(value) => (
                    "blackElo".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::Int(value as i64),
                    )]),
                ),
                Self::InitalBoardEquals(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::InitalBoardInVec(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::InitalBoardNotInVec(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::InitalBoardLt(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::InitalBoardLte(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::InitalBoardGt(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::InitalBoardGte(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::InitalBoardContains(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::InitalBoardStartsWith(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::InitalBoardEndsWith(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::InitalBoardMode(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::InitalBoardNot(value) => (
                    "initalBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardEquals(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardInVec(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::CurrentBoardNotInVec(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::CurrentBoardLt(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardLte(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardGt(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardGte(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardContains(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "contains".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardStartsWith(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "startsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardEndsWith(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "endsWith".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::CurrentBoardMode(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "mode".to_string(),
                        PrismaValue::Enum(value.to_string()),
                    )]),
                ),
                Self::CurrentBoardNot(value) => (
                    "currentBoard".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::MoveListEquals(value) => (
                    "moveList".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "equals".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::MoveListHas(value) => (
                    "moveList".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "has".to_string(),
                        PrismaValue::String(value),
                    )]),
                ),
                Self::MoveListHasEvery(value) => (
                    "moveList".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "hasEvery".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::MoveListHasSome(value) => (
                    "moveList".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "hasSome".to_string(),
                        PrismaValue::List(
                            value.into_iter().map(|v| PrismaValue::String(v)).collect(),
                        ),
                    )]),
                ),
                Self::MoveListIsEmpty(value) => (
                    "moveList".to_string(),
                    SerializedWhereValue::Object(vec![(
                        "isEmpty".to_string(),
                        PrismaValue::Boolean(value),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        IdEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::IdEquals(value) => Self::IdEquals(value),
            }
        }
    }
    impl From<Operator<Self>> for WhereParam {
        fn from(op: Operator<Self>) -> Self {
            match op {
                Operator::Not(value) => Self::Not(value),
                Operator::And(value) => Self::And(value),
                Operator::Or(value) => Self::Or(value),
            }
        }
    }
    pub type UniqueArgs = prisma_client_rust::UniqueArgs<WithParam>;
    pub type ManyArgs = prisma_client_rust::ManyArgs<WhereParam, WithParam, OrderByParam, Cursor>;
    pub type Create<'a> = prisma_client_rust::Create<'a, SetParam, WithParam, Data>;
    pub type FindUnique<'a> =
        prisma_client_rust::FindUnique<'a, WhereParam, WithParam, SetParam, Data>;
    pub type FindMany<'a> = prisma_client_rust::FindMany<
        'a,
        WhereParam,
        WithParam,
        OrderByParam,
        Cursor,
        SetParam,
        Data,
    >;
    pub type FindFirst<'a> =
        prisma_client_rust::FindFirst<'a, WhereParam, WithParam, OrderByParam, Cursor, Data>;
    pub type Update<'a> = prisma_client_rust::Update<'a, WhereParam, SetParam, WithParam, Data>;
    pub type UpdateMany<'a> = prisma_client_rust::UpdateMany<'a, WhereParam, SetParam>;
    pub type Upsert<'a> = prisma_client_rust::Upsert<'a, WhereParam, SetParam, WithParam, Data>;
    pub type Delete<'a> = prisma_client_rust::Delete<'a, WhereParam, WithParam, Data>;
    pub type DeleteMany<'a> = prisma_client_rust::DeleteMany<'a, WhereParam>;
    pub struct Actions<'a> {
        pub client: &'a PrismaClient,
    }
    impl<'a> Actions<'a> {
        pub fn create(
            self,
            white: white::Link,
            black: black::Link,
            white_outcome: white_outcome::Set,
            black_outcome: black_outcome::Set,
            white_elo: white_elo::Set,
            black_elo: black_elo::Set,
            inital_board: inital_board::Set,
            current_board: current_board::Set,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.push(white.into());
            _params.push(black.into());
            _params.push(white_outcome.into());
            _params.push(black_outcome.into());
            _params.push(white_elo.into());
            _params.push(black_elo.into());
            _params.push(inital_board.into());
            _params.push(current_board.into());
            Create::new(
                self.client._new_query_context(),
                QueryInfo::new("Game", _outputs()),
                _params,
            )
        }
        pub fn find_unique(self, param: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(
                self.client._new_query_context(),
                QueryInfo::new("Game", _outputs()),
                param.into(),
            )
        }
        pub fn find_first(self, params: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(
                self.client._new_query_context(),
                QueryInfo::new("Game", _outputs()),
                params,
            )
        }
        pub fn find_many(self, params: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(
                self.client._new_query_context(),
                QueryInfo::new("Game", _outputs()),
                params,
            )
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            _create: (
                white::Link,
                black::Link,
                white_outcome::Set,
                black_outcome::Set,
                white_elo::Set,
                black_elo::Set,
                inital_board::Set,
                current_board::Set,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            let (
                white,
                black,
                white_outcome,
                black_outcome,
                white_elo,
                black_elo,
                inital_board,
                current_board,
                mut _params,
            ) = _create;
            _params.push(white.into());
            _params.push(black.into());
            _params.push(white_outcome.into());
            _params.push(black_outcome.into());
            _params.push(white_elo.into());
            _params.push(black_elo.into());
            _params.push(inital_board.into());
            _params.push(current_board.into());
            Upsert::new(
                self.client._new_query_context(),
                QueryInfo::new("Game", _outputs()),
                _where.into(),
                _params,
                _update,
            )
        }
    }
}
pub mod _prisma {
    use super::*;
    use prisma_client_rust::{
        queries::QueryContext,
        query_core::{QueryExecutor, QuerySchema},
        raw, ExecuteRaw, QueryRaw,
    };
    use serde::{Deserialize, Serialize};
    use std::fmt;
    use std::sync::Arc;
    pub struct PrismaClient {
        executor: Box<dyn QueryExecutor + Send + Sync + 'static>,
        query_schema: Arc<QuerySchema>,
    }
    impl fmt::Debug for PrismaClient {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("PrismaClient").finish()
        }
    }
    impl PrismaClient {
        pub(super) fn _new_query_context(&self) -> QueryContext {
            QueryContext::new(&self.executor, self.query_schema.clone())
        }
        pub(super) fn _new(
            executor: Box<dyn QueryExecutor + Send + Sync + 'static>,
            query_schema: Arc<QuerySchema>,
        ) -> Self {
            Self {
                executor,
                query_schema,
            }
        }
        pub async fn _query_raw<T: serde::de::DeserializeOwned>(
            &self,
            query: raw::Raw,
        ) -> QueryResult<Vec<T>> {
            QueryRaw::new(
                QueryContext::new(&self.executor, self.query_schema.clone()),
                query,
                DATABASE_STR,
            )
            .exec()
            .await
        }
        pub async fn _execute_raw(&self, query: raw::Raw) -> QueryResult<i64> {
            ExecuteRaw::new(
                QueryContext::new(&self.executor, self.query_schema.clone()),
                query,
                DATABASE_STR,
            )
            .exec()
            .await
        }
        pub fn user(&self) -> user::Actions {
            user::Actions { client: &self }
        }
        pub fn game(&self) -> game::Actions {
            game::Actions { client: &self }
        }
    }
    #[derive(Debug, Clone, Copy, Serialize, Deserialize)]
    pub enum UserScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "startedPlaying")]
        StartedPlaying,
        #[serde(rename = "elo")]
        Elo,
    }
    impl ToString for UserScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::StartedPlaying => "startedPlaying".to_string(),
                Self::Elo => "elo".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, Serialize, Deserialize)]
    pub enum GameScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "whiteId")]
        WhiteId,
        #[serde(rename = "blackId")]
        BlackId,
        #[serde(rename = "whiteOutcome")]
        WhiteOutcome,
        #[serde(rename = "blackOutcome")]
        BlackOutcome,
        #[serde(rename = "whiteElo")]
        WhiteElo,
        #[serde(rename = "blackElo")]
        BlackElo,
        #[serde(rename = "initalBoard")]
        InitalBoard,
        #[serde(rename = "currentBoard")]
        CurrentBoard,
        #[serde(rename = "moveList")]
        MoveList,
    }
    impl ToString for GameScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::WhiteId => "whiteId".to_string(),
                Self::BlackId => "blackId".to_string(),
                Self::WhiteOutcome => "whiteOutcome".to_string(),
                Self::BlackOutcome => "blackOutcome".to_string(),
                Self::WhiteElo => "whiteElo".to_string(),
                Self::BlackElo => "blackElo".to_string(),
                Self::InitalBoard => "initalBoard".to_string(),
                Self::CurrentBoard => "currentBoard".to_string(),
                Self::MoveList => "moveList".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, Serialize, Deserialize)]
    pub enum SortOrder {
        #[serde(rename = "asc")]
        Asc,
        #[serde(rename = "desc")]
        Desc,
    }
    impl ToString for SortOrder {
        fn to_string(&self) -> String {
            match self {
                Self::Asc => "asc".to_string(),
                Self::Desc => "desc".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, Serialize, Deserialize)]
    pub enum QueryMode {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "insensitive")]
        Insensitive,
    }
    impl ToString for QueryMode {
        fn to_string(&self) -> String {
            match self {
                Self::Default => "default".to_string(),
                Self::Insensitive => "insensitive".to_string(),
            }
        }
    }
}
pub use _prisma::PrismaClient;
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum Outcome {
    #[serde(rename = "WIN")]
    Win,
    #[serde(rename = "LOSS")]
    Loss,
    #[serde(rename = "DRAW")]
    Draw,
    #[serde(rename = "UNDECIDED")]
    Undecided,
}
impl ToString for Outcome {
    fn to_string(&self) -> String {
        match self {
            Self::Win => "WIN".to_string(),
            Self::Loss => "LOSS".to_string(),
            Self::Draw => "DRAW".to_string(),
            Self::Undecided => "UNDECIDED".to_string(),
        }
    }
}
